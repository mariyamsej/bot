const express = require('express');
const logger = require('morgan');
const app = express();
const port = 80;

app.set('port', port);
app.use(logger('dev'));

const semaphore = require('semaphore');
const concurrencyLimit = 5;
const requestSemaphore = semaphore(concurrencyLimit);

const sqlite3 = require('sqlite3');
const db = new sqlite3.Database('./chat_convo.db');

const bodyParser = require("body-parser");
const axios = require('axios');

const { Configuration, OpenAIApi } = require('openai');
const http = require("http");
const openaiApiKey = "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"
const configuration = new Configuration({
    apiKey: openaiApiKey
})
const openai = new OpenAIApi(configuration);

const ngrok_URL = ' https://7fd2-2a0d-b201-1017-9d9f-8874-b442-d32f-e6c1.eu.ngrok.io';
const botToken = '5818073326:AAFj0Vf4wf7S88sq5cYiROUW8V65_ULnwm8';

const chatAdmin = 'https://t.me/+ExrWaNtPE581ZDhi';

app.post('/webhook', bodyParser.json(), async (req, res) => {
    try {
        handleRequest(req);
        res.sendStatus(200);
    } catch (error) {
        console.error(error);
        res.sendStatus(500);
    }
});

app.get('/', function (req, res) {
    res.redirect('https://t.me/i345vbot');
})

async function handleRequest(req) {
    const {message} = req.body;
    const chatId = message.chat.id;
    const text = message.text;
    console.log("---- " + message.from.username);
    console.log("Question: " + message.text);

    db.serialize(function() {
        db.run('INSERT OR IGNORE INTO chats (user_id, chat_id, date, user_firstname, user_lastname) \
            VALUES (?, ?, ?, ?, ?)',
            [
                req.body.message.from.id,
                req.body.message.chat.id,
                Date.now(),
                req.body.message.from.first_name,
                req.body.message.from.last_name
            ]);
    })

    let resp;

    let lastMsgDate = await new Promise((resolve, reject) => {
        db.all('SELECT last_msg_date FROM chats WHERE chat_id = ?', [chatId], function(err, rows) {
            if (err) {
                reject(err);
            } else {
                resolve(rows[0].last_msg_date);
            }
        });
    });

    const is_link = isLink(req.body.message.text)

    if (lastMsgDate == null) {
        if (text === '/start') {
            resp = '–ü—Ä–∏–≤–µ—Ç, ' + message.from.first_name + ' üëã! –Ø —á–∞—Ç-–±–æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è H2K ü§ñ. –ü–æ—Å—Ç–∞—Ä–∞—é—Å—å —Ä–µ—à–∏—Ç—å –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã ü§ì ';
            sendMessage(chatId, resp + '\n–ü—Ä–æ—à—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–æ–ø—Ä–æ—Å –µ–¥–∏–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –µ–º–∫–æ. (–ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–ø—Ä–∞–≤–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –æ–Ω–æ –Ω–µ –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è)');
            console.log("Answer: –ü—Ä–∏–≤–µ—Ç!");
            db.serialize(function() {
                db.run('INSERT INTO convos (question, answer, chat_id, q_date) VALUES (?, ?, ?, ?)',
                    [
                        req.body.message.text,
                        resp,
                        chatId,
                        req.body.message.date
                    ]);
            })
        } else if (text === '/clear') {
            db.run('INSERT INTO deleted (chat_id, question, answer, q_date) SELECT chat_id, question, answer, q_date FROM convos WHERE chat_id = ?', [chatId]);
            db.run('DELETE FROM convos WHERE chat_id = ?', [chatId]);
            sendMessage(chatId, '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞.');
            console.log("Clear Command");
        } else if (is_link) {
            sendDirectReply(chatId, '–Ø –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏.');
            console.log("Link");
        }
    } else {
        console.log("Time from previous message : ", req.body.message.date - lastMsgDate);
        if (text === '/start') {
            resp = '–ü—Ä–∏–≤–µ—Ç, ' + message.from.first_name + ' üëã! –Ø —á–∞—Ç-–±–æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è H2K ü§ñ. –ü–æ—Å—Ç–∞—Ä–∞—é—Å—å —Ä–µ—à–∏—Ç—å –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã ü§ì ';
            sendMessage(chatId, resp + '\n–ü—Ä–æ—à—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–æ–ø—Ä–æ—Å –µ–¥–∏–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –µ–º–∫–æ. (–ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–ø—Ä–∞–≤–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –æ–Ω–æ –Ω–µ –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è)');
            console.log("Answer: –ü—Ä–∏–≤–µ—Ç!");
        }
        else if (text === '/clear') {
            db.run('INSERT INTO deleted (chat_id, question, answer, q_date) SELECT chat_id, question, answer, q_date FROM convos WHERE chat_id = ?', [chatId]);
            db.run('DELETE FROM convos WHERE chat_id = ?', [chatId]);
            sendMessage(chatId, '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞.');
            console.log("Clear Command");
        }
        else if (text === '/balance') {
            let convos = await new Promise((resolve, reject) => {
                db.all('SELECT propmts_token, complitions_token FROM convos WHERE chat_id = ? ORDER BY id DESC LIMIT 1', [chatId], function(err, rows) {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(rows[0]);
                    }
                });
            });
            if (convos == null || convos.propmts_token == 0) {
                sendMessage(chatId, `–í—ã –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏ –∑–∞–ø—Ä–æ—Å—ã.`);
            }
            else {
                sendMessage(chatId, `–ë–∞–ª–∞–Ω—Å: ${convos.propmts_token + convos.complitions_token - 2775}/1320`);
            }
            console.log("Balance Command");
        }
        else if ((req.body.message.date - lastMsgDate) >= 5 && text.length < 2 && text.toUpperCase() != "I" && text.toUpperCase() != "–Ø") {
            console.log("Spam Message");
            sendDirectReply(chatId, "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", message.message_id)
        }
        else if (isLink(req.body.message.text)) {
            sendDirectReply(chatId, "–Ø –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏.");
            console.log("Link");
        }
        else if ((req.body.message.date - lastMsgDate) >= 5) {
            let ms_id = await sendDirectReply(chatId, "–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...", message.message_id);
            //console.log('ms_id', ms_id)
            try {
                resp = await getChatCompletion(text, chatId);
                if (resp[0] == 429) {
                    sendDirectReplyUpdate(chatId, "ChatGPT –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", ms_id);
                    console.log("Answer: Too Many Requests");
                    return new Error("Too Many Requests in ChatGPT");
                }
                else if (resp[0] == 400) {
                    sendDirectReplyUpdate(chatId, "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /clear", ms_id);
                    console.log("Answer: Bad Request");
                    return new Error("Bad Request in ChatGPT");
                }
                await sendDirectReplyUpdate(chatId, resp.choices[0].message.content, ms_id);
                console.log("Answer: " + resp.choices[0].message.content);
                await forwardMessage(chatId, resp.choices[0].message.content, ms_id, chatAdmin);
            }
            catch (error) {
                return error
            }

            db.serialize(function() {
                db.run('INSERT INTO convos (question, answer, chat_id, q_date, propmts_token, complitions_token, price) \
            VALUES (?, ?, ?, ?, ?, ?, ?)',
                    [
                        req.body.message.text,
                        resp.choices[0].message.content,
                        req.body.message.chat.id,
                        req.body.message.date,
                        resp.usage.prompt_tokens,
                        resp.usage.completion_tokens,
                        ((resp.usage.total_tokens / 1000) * 0.002).toFixed(6)
                    ]);
            })
        }
        else if ((req.body.message.date - lastMsgDate) < 5) {
            console.log("Spam Message");
            sendDirectReply(chatId, "–û—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –ø—Ä–æ—à–ª–æ –∏ 5 —Å–µ–∫—É–Ω–¥", message.message_id);
        }
    }
    console.log("---- ");
    db.serialize(function() {
        db.run('UPDATE chats SET last_msg_date = ? WHERE chat_id = ?',
            [ req.body.message.date,  chatId]);
    })
}

async function sendMessage(chatId, text) {
    const sendMessageUrl = 'https://api.telegram.org/bot' + botToken + '/sendMessage';

    try {
        const response = await axios.post(sendMessageUrl, JSON.stringify({
            chat_id: chatId,
            text: text
        }), {
            headers: {
                'Content-Type': 'application/json'
            }
        });
        console.log('Message_id', response.data.result.message_id);
        return response.data.result.message_id;
    } catch (error) {
        console.error('Error sending message: ', chatId, 'Text: ', text, 'Error: ', error.message);
    }

    //isPrompts(chatId)
}

async function sendDirectReplyUpdate(chatId, text, message_id) {
    const sendMessageUrl = 'https://api.telegram.org/bot' + botToken + '/editMessageText';

    try {
        const response = await axios.post(sendMessageUrl, JSON.stringify({
            chat_id: chatId,
            message_id: message_id,
            text: text
        }), {
            headers: {
                'Content-Type': 'application/json'
            }
        });
        //console.log('Message sent successfully');
    } catch (error) {
        console.error('Error sending message: ', chatId, 'Text: ', text, 'Error: ', error.message);
    }
}

async function sendDirectReply(chatId, text, message_id) {
    const sendMessageUrl = 'https://api.telegram.org/bot' + botToken + '/sendMessage';

    try {
        const response = await axios.post(sendMessageUrl, JSON.stringify({
            chat_id: chatId,
            text: text,
            reply_to_message_id: message_id
        }), {
            headers: {
                'Content-Type': 'application/json'
            }
        });
        console.log('Message_id', response.data.result.message_id);
        return response.data.result.message_id;
    } catch (error) {
        console.error('Error sending message: ', chatId, 'Text: ', text, 'Error: ', error.message);
    }
}

async function forwardMessage(chatId, text, message_id, fromChatId){
    const forwardMessageUrl = 'https://api.telegram.org/bot' + botToken + '/forwardMessage';

    try {
        const forwardResponse = await axios.post(forwardMessageUrl, JSON.stringify({
            chat_id: chatId,
            text: text,
            from_what_chat: fromChatId,
            reply_to_message_id: message_id
        }), {
            headers: {
                'Content-Type': 'application/json'
            }
        });
        console.log('Message_id', forwardResponse.data.result.message_id);
        return forwardResponse.data.result.message_id;
    } catch (error) {
        console.error('Error sending message: ', chatId, 'Text: ', text, 'Error: ', error.message);
    }
}

async function getChatCompletion(query, chat_id) {
    let send_query = '(–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è H2K —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –¥—Ä—É–≥–æ–µ —Ç–æ —Å–∫–∞–∂–∏ —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å.) –í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + query;
    try {
        let propts_prev = [
            { role: 'system', content: '–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–µ –Ω–∏–∂–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –ø–æ –ø—Ä–æ–µ–∫—Ç—É H2K Mobile. ' +
            '–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω, –Ω–∞–ø–∏—à–∏, —á—Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å –ø—Ä–æ —ç—Ç–æ, –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ—Å–µ—Ç–∏—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç H2K https://h2k.me/suggestions_ru –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –ø–æ—á—Ç—É office@h2k.me\n' +
            '–ï—Å–ª–∏ —É —Ç–µ–±—è —Å–ø—Ä–æ—Å–∏–ª–∏ –∏ —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å –¥–µ—Ç–∞–ª–µ–π —É—Ç–æ—á–Ω–∏ —ç—Ç–∏ –¥–µ—Ç–∞–ª–∏.\n' +
            '–ï—Å–ª–∏ —É —Ç–µ–±—è —Å–ø—Ä–æ—Å–∏–ª–∏ –ø–æ—á—Ç—É —Ç–æ –¥–∞–π —ç—Ç–æ office@h2k.me –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ https://h2k.me/suggestions_ru.\n' +
            '–ï—Å–ª–∏ —É —Ç–µ–±—è —Å–ø—Ä–æ—Å–∏–ª–∏ –∫—Ç–æ —Ç–µ–±—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª —Å–∫–∞–∂–∏ —á—Ç–æ —ç—Ç–æ –±—ã–ª–∏ –û–ª–∂–∞—Å –∏ –ú–∞—Ä–∏—è–º –∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏ Oris Lab.\n' +
            '–û—Ç–≤–µ—á–∞–π –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 250 —Å–∏–º–≤–æ–ª–æ–≤. \n' +
            '\n' +
            '–ë–ê–ó–ê –ó–ù–ê–ù–ò–ô H2K Mobile: ---------\n' +
            'H2K - —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ—à–µ–ª–µ–∫ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–¥–ø–∏—Å—è–º–∏.\n' +
            '–ù–æ—É-—Ö–∞—É HIDDEN KEYS –∏–ª–∏ –ù2K ‚Äî –±—ã—Å—Ç—Ä–∞—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–ª–æ–∫—á–µ–π–Ω—É, –≤—ã–ø–æ–ª–Ω—è—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—é –º—É–ª—å—Ç–∏–ø–æ–¥–ø–∏—Å–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞.\n' +
            '\n' +
            '–ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∏–ª–∏ —á–µ—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω, –≤–∞–º –Ω—É–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –∫–µ—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —É –≤–∞—Å –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏. –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ –æ–¥–Ω–æ–π –∏–∑ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å–∞–π—Ç–µ.\n' +
            '\n' +
            '–ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª—å–∫–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω–∞—Ö Bitcoin, Ethereum –∏ Tron.\n' +
            '\n' +
            '–ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã BTC, ETH, TRX, USDT.\n' +
            '\n' +
            '–ï—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ Android. –í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä –Ω–∞ —Å–≤–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä.\n' +
            '\n' +
            '–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "–ö–æ—à–µ–ª—å–∫–∏", –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫—Ä–∞—Å–Ω—É—é —Å—Ç—Ä–µ–ª–∫—É –≤—ã–≤–æ–¥–∞ –∏ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —ç–∫—Ä–∞–Ω —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. \n' +
            '\n' +
            '–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª–µ–∫, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´–ö–æ—à–µ–ª—å–∫–∏¬ª –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–°–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª–µ–∫¬ª. –î–∞–ª–µ–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—à–µ–ª—å–∫–∞: –∏–º—è –∫–æ—à–µ–ª—å–∫–∞, —Å–µ—Ç—å –±–ª–æ–∫—á–µ–π–Ω –∫–æ—à–µ–ª—å–∫–∞, –ø—É–±–ª–∏—á–Ω—ã–µ –∫–ª—é—á–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–µ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.\n' +
            '\n' +
            '–ö–æ—à–µ–ª–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–æ–∑–¥–∞–µ—Ç–µ –≤ –Ω–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, —è–≤–ª—è–µ—Ç—Å—è –º—É–ª—å—Ç–∏–ø–æ–¥–ø–∏—Å–Ω—ã–º. –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–µ–π –∫—Ä–æ–º–µ –≤–∞—à–µ–π –∫–∞–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–¥–ø–∏—Å–∞–Ω—Ç—ã ‚Äì —ç—Ç–æ –ª—é–¥–∏, –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Å–∞–º–∏ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –∏ –∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–∫–∂–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞—é—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é. –£ –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ —Å–≤–æ–π –Ω–∞–±–æ—Ä –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–æ–≤.\n' +
            '\n' +
            '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–æ–≤. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞, –ø—Ä–∏–¥–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–æ–≤.\n' +
            '\n' +
            '–ö–æ—à–µ–ª–µ–∫ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –±—ã–ª –≤–Ω–µ—Å–µ–Ω –≤ —Ä–µ–µ—Å—Ç—Ä –±–ª–æ–∫—á–µ–π–Ω–∞.\n' +
            '\n' +
            '–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á. –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –∫–ª—é—á–∏ –±—ã–ª–∏ –≤—ã–ø—É—â–µ–Ω—ã, –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—É–±–ª–∏—á–Ω—ã–º –∫–ª—é—á–æ–º¬ª.\n' +
            '\n' +
            '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ –∫–æ—à–µ–ª–µ–∫, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∫–æ–ø–∏—Ä—É–µ—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞, –∞ –Ω–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –∞–∫–∫–∞—É–Ω—Ç–∞. –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –ø–µ—Ä–µ–π–¥—è ¬´–ê–∫—Ç–∏–≤—ã¬ª –∏ –≤—ã–±—Ä–∞–≤ –Ω—É–∂–Ω—ã–π –≤–∞–º –∫–æ—à–µ–ª–µ–∫. –û—Ç–∫—Ä–æ–µ—Ç—Å—è —ç–∫—Ä–∞–Ω —Å –¥–µ—Ç–∞–ª—è–º–∏ –∫–æ—à–µ–ª—å–∫–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–ª—É—á–∏—Ç—å¬ª –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å –∏–∑ –ø–æ—è–≤–∏–≤—à–µ–≥–æ—Å—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞.\n' +
            '\n' +
            '–ï—Å–ª–∏ –∫–æ—à–µ–ª–µ–∫ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–ª–æ 5-7 –º–∏–Ω—É—Ç –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –µ—â–µ —Ä–∞–∑. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—å, –∑–Ω–∞—á–∏—Ç, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ –∑–∞–Ω–æ–≤–æ.\n' +
            '\n' +
            '–ü–æ–∫–∞ —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ —É–∫–∞–∑–∞–Ω –∫–∞–∫ ¬´—Å–æ–∑–¥–∞–µ—Ç—Å—è¬ª, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –∫–æ—à–µ–ª–µ–∫ –≤ —Ä–µ–µ—Å—Ç—Ä–µ –±–ª–æ–∫—á–µ–π–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä –≤—Å–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã —É–≤–∏–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤–º–µ—Å—Ç–æ —ç—Ç–æ–π –Ω–∞–¥–ø–∏—Å–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –∫–æ—à–µ–ª–µ–∫ –±—ã–ª —Å–æ–∑–¥–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –∏ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–∫–∞–Ω–µ—Ä –±–ª–æ–∫—á–µ–π–Ω–∞.\n' +
            '\n' +
            '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ—à–µ–ª—å–∫–∏ –≤ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n' +
            '\n' +
            '–ù–∞—à –∫–æ—à–µ–ª–µ–∫ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –º—É–ª—å—Ç–∏–ø–æ–¥–ø–∏—Å—å—é. –ú—É–ª—å—Ç–∏–ø–æ–¥–ø–∏—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–µ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ, –∞ —Å –ø–æ–º–æ—â—å—é —Å–∏—Å—Ç–µ–º—ã –≤–Ω–µ –±–ª–æ–∫—á–µ–π–Ω–∞. –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –ø–æ–¥–ø–∏—Å—å—é —è–≤–ª—è—é—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–ª—é—á–∏ –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞.\n' +
            '\n' +
            '–ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–µ–π –¥–æ—Å—Ç–∏–≥–ª–æ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—É–¥–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω. –ï—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –º–µ–Ω—å—à–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω.\n' +
            '\n' +
            '–ï—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–µ–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Ç–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —Å–µ—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é. –°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —Å –≤–∞—Å –Ω–µ –≤–∑–∏–º–∞–µ—Ç—Å—è –∫–æ–º–∏—Å—Å–∏—è. –í—ã —É–≤–∏–¥–∏—Ç–µ –Ω–µ–ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ø–∏—Å–∫–µ –≤–∞—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.\n' +
            '\n' +
            '–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–≤–æ–∏–º–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞–º–∏ –∏ —Å–æ–æ–±—â–∏—Ç–µ –∏–º, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞–ª–∏ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏–ª–∏.\n' +
            '\n' +
            '–ï—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Å–µ—Ç—å –∏ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –Ω–µ–ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π. –ó–∞ —Ç–∞–∫—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–µ –≤–∑–∏–º–∞–µ—Ç—Å—è –∫–æ–º–∏—Å—Å–∏—è. –¢–∞–∫–∂–µ —É—á—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∫–æ–º–∏—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å–≤–µ—Ä—Ö —Å—É–º–º—ã, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ.\n' +
            '\n' +
            '–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–µ—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–æ–≤ —É –≤–∞—Å –±—ã–ª–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Å—É–º–º–∞ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ, —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏.\n' +
            '\n' +
            '–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 9 –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–æ–≤.\n' +
            '\n' +
            '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –∏–∑ –∑–∞—è–≤–∫–∏, –∫—Ç–æ –∏–∑ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–æ–≤ –≤–∞–º –æ—Ç–∫–∞–∑–∞–ª –∏–ª–∏ –æ–¥–æ–±—Ä–∏–ª.\n' +
            '\n' +
            '"–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∏" - —ç—Ç–æ –≤–∫–ª–∞–¥–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤–∞—Å –ø—Ä–æ—Å—è—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å, —á—Ç–æ–±—ã –ø—Ä–æ—à–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –∫–æ—à–µ–ª—å–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —É–∫–∞–∑–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–æ–º.\n' +
            '\n' +
            '"–ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã" - —ç—Ç–æ –≤–∫–ª–∞–¥–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏ –∏–ª–∏ –æ—Ç–≤–µ—Ä–≥–ª–∏. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å —á—É–∂–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã.\n' +
            '\n' +
            '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç –º–æ–∂–µ—Ç —É–≤–∏–¥–µ—Ç—å –ø—Ä–∏—á–∏–Ω—É —Å–≤–æ–µ–≥–æ –æ—Ç–∫–∞–∑–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ¬ª –Ω–∞ —ç–∫—Ä–∞–Ω–µ ¬´–ê–∫—Ç–∏–≤—ã¬ª.\n' +
            '\n' +
            '–ï—Å–ª–∏ –≤–∞—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å –≤ —Å–µ—Ç—å, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π –µ–µ –ø–æ–¥–ø–∏—Å–∞–ª–æ.\n' +
            '\n' +
            '–ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∞—Å—å —á–µ—Ä–µ–∑ 5-10 –º–∏–Ω—É—Ç, —Å–æ–æ–±—â–∏—Ç–µ —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ UNID –≤–∞—à–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.\n' +
            '\n' +
            '–ß—Ç–æ–±—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–æ–≤, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω ¬´–ü–æ–¥–ø–∏—Å–∞–Ω—Ç—ã¬ª, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç—Ä–∏ —Ç–æ—á–∫–∏ —Å–±–æ–∫—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–≠–∫—Å–ø–æ—Ä—Ç¬ª –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é —ç–∫—Å–ø–æ—Ä—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º —É–¥–æ–±–Ω–∞.\n' +
            '\n' +
            '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ—é –∫–æ–º–∏—Å—Å–∏—é –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ.\n' +
            '\n' +
            '–Ø —Å–¥–µ–ª–∞–ª –≤—Å–µ, —á—Ç–æ –≤—ã –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞–ª–∏, –∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ.\n' +
            '–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫—É—é –æ—à–∏–±–∫—É –≤–∞–º –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω, –Ω–∞ office@h2k.me.\n' +
            '\n' +
            '–ö–æ–º–∏—Å—Å–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 0.09% –æ—Ç —Å—É–º–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞, –º–∏–Ω–∏–º—É–º 1$, –º–∞–∫—Å–∏–º—É–º 999$. –í –Ω–∞—à—É –∫–æ–º–∏—Å—Å–∏—é –≤—Ö–æ–¥–∏—Ç –∫–æ–º–∏—Å—Å–∏—è –±–ª–æ–∫—á–µ–π–Ω–∞.\n' +
            '\n' +
            '–° –ø–æ–º–æ—â—å—é –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –≤—ã –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –æ—Ç —Å–≤–æ–µ–≥–æ –ª–∏—Ü–∞. –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∫–æ—à–µ–ª—å–∫–∞ ‚Äì —ç—Ç–æ –µ–≥–æ –∞–¥—Ä–µ—Å. –í –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ —Ä–∞–∑–¥–µ–ª—å–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—à –ø—É–±–ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å —Å–æ–∑–¥–∞–µ–º –º—ã —Å–∞–º–∏.\n' +
            '\n' +
            '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n'+
            '-------'+
            '\n' +
            '–ò—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª–∏–∫–∏ –∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.\n' +
            '–ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –∑–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≤ –æ—Ç–≤–µ—Ç–µ.' +
            '–û—Ç–≤–µ—á–∞–π –Ω–∞ —è–∑—ã–∫–µ –≤–æ–ø—Ä–æ—Å–∞.' +
            '–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –≤ —á–∞—Ç–µ Telegram.'
            },
        ]
        let convos = await new Promise((resolve, reject) => {
            db.all('SELECT * FROM convos WHERE chat_id = ?', [chat_id], function(err, rows) {
                if (err) {
                    reject(err);
                } else {
                    resolve(rows);
                }
            });
        });

        convos.forEach(function(conv) {
            const answer = conv.answer !== null ? conv.answer : " ";
            propts_prev[propts_prev.length] = { role: 'user', content: conv.question, };
            propts_prev[propts_prev.length] = { role: 'assistant', content: conv.answer };
        });

        propts_prev[propts_prev.length] = { role: 'user', content: send_query};

        const response = await openai.createChatCompletion({
            messages: propts_prev,
            model: 'gpt-3.5-turbo',
            temperature: 0.4
        });

        console.log(response.data.usage)
        return response.data;
    } catch (error) {
        console.error('Error Generating Answer', error.response.status, error.response.statusText);
        if (error.response.status == '429') {
            return [429, error]
        } else if (error.response.status == '400') {
            return [400, error]
        }
    }
}

axios.post('https://api.telegram.org/bot' + botToken +'/setWebhook', {
    url: ngrok_URL + "/webhook"
})
    .then(() => {
        console.log('Webhook set up successfully!');
    })
    .catch((error) => {
        console.error('Failed to set up webhook:', error);
    });

var server = http.createServer(app);

server.listen(port, () => {
    console.log("App listening started at port: " + port)
})
server.on('error', onError);

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function isLink(text) {
    // regex for http&https
    const regex = /^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$/;
  
    return regex.test(text);
  }

// function isPrompts(chatId) {
//     if (propmts_token > 3500) {
//         console.log('Prompt more than 3500');
//         sendMessage(chatId, '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞.');
//       } 
// }