const {sendMessage, sendDirectReply, sendDirectReplyUpdate, forwardMessageWithText, forwardMessage} = require("./telegram");
const {getChatCompletion} = require("./openai");

const sqlite3 = require('sqlite3');
const db = new sqlite3.Database('./database/chat_convo.db');
const chatAdmin = process.env.CHAT_ID;

exports.handleBotRequest = async function (req) {
    const {message} = req.body;
    const chatId = message.chat.id;
    const text = message.text;

    const additionalText = `–≠—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º "${req.body.message.from.first_name} ${req.body.message.from.last_name}" —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:`;

    console.log("---- " + message.from.username);
    console.log("Question: " + message.text);

    db.serialize(function() {
        db.run('INSERT OR IGNORE INTO chats (user_id, chat_id, date, user_firstname, user_lastname) \
            VALUES (?, ?, ?, ?, ?)',
            [
                req.body.message.from.id,
                req.body.message.chat.id,
                Date.now(),
                req.body.message.from.first_name,
                req.body.message.from.last_name
            ]);
    })

    let resp;

    let lastMsgDate = await new Promise((resolve, reject) => {
        db.all('SELECT last_msg_date FROM chats WHERE chat_id = ?', [chatId], function(err, rows) {
            if (err) {
                reject(err);
            } else {
                resolve(rows[0].last_msg_date);
            }
        });
    });

    if (lastMsgDate == null) {
        if (text === '/start') {
            resp = '–ü—Ä–∏–≤–µ—Ç, ' + message.from.first_name + ' üëã! –Ø —á–∞—Ç-–±–æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è H2K ü§ñ. –ü–æ—Å—Ç–∞—Ä–∞—é—Å—å —Ä–µ—à–∏—Ç—å –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã ü§ì ';
            sendMessage(chatId, resp + '\n–ü—Ä–æ—à—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–æ–ø—Ä–æ—Å –µ–¥–∏–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –µ–º–∫–æ. (–ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–ø—Ä–∞–≤–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –æ–Ω–æ –Ω–µ –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è)');
            console.log("Answer: –ü—Ä–∏–≤–µ—Ç!");
            db.serialize(function() {
                db.run('INSERT INTO convos (question, answer, chat_id, q_date) VALUES (?, ?, ?, ?)',
                    [
                        req.body.message.text,
                        resp,
                        chatId,
                        req.body.message.date
                    ]);
            })
        } else if (text === '/clear') {
            db.run('INSERT INTO deleted (chat_id, question, answer, q_date) SELECT chat_id, question, answer, q_date FROM convos WHERE chat_id = ?', [chatId]);
            db.run('DELETE FROM convos WHERE chat_id = ?', [chatId]);
            sendMessage(chatId, '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞.');
            console.log("Clear Command");
        }
    } else {
        console.log("Time from previous message : ", req.body.message.date - lastMsgDate);
        if (text === '/start') {
            resp = '–ü—Ä–∏–≤–µ—Ç, ' + message.from.first_name + ' üëã! –Ø —á–∞—Ç-–±–æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è H2K ü§ñ. –ü–æ—Å—Ç–∞—Ä–∞—é—Å—å —Ä–µ—à–∏—Ç—å –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã ü§ì ';
            sendMessage(chatId, resp + '\n–ü—Ä–æ—à—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–æ–ø—Ä–æ—Å –µ–¥–∏–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –µ–º–∫–æ. (–ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–ø—Ä–∞–≤–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –æ–Ω–æ –Ω–µ –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è)');
            console.log("Answer: –ü—Ä–∏–≤–µ—Ç!");
        }
        else if (text === '/clear') {
            db.run('INSERT INTO deleted (chat_id, question, answer, q_date) SELECT chat_id, question, answer, q_date FROM convos WHERE chat_id = ?', [chatId]);
            db.run('DELETE FROM convos WHERE chat_id = ?', [chatId]);
            sendMessage(chatId, '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞.');
            console.log("Clear Command");
        }
        else if (text === '/balance') {
            let convos = await new Promise((resolve, reject) => {
                db.all('SELECT propmts_token, complitions_token FROM convos WHERE chat_id = ? ORDER BY id DESC LIMIT 1', [chatId], function(err, rows) {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(rows[0]);
                    }
                });
            });
            if (convos == null || convos.propmts_token == 0) {
                sendMessage(chatId, `–í—ã –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏ –∑–∞–ø—Ä–æ—Å—ã.`);
            }
            else {
                sendMessage(chatId, `–ë–∞–ª–∞–Ω—Å: ${convos.propmts_token + convos.complitions_token - 2775}/1320`);
            }
            console.log("Balance Command");
        }
        else if ((req.body.message.date - lastMsgDate) >= 5 && text.length < 2 && text.toUpperCase() != "I" && text.toUpperCase() != "–Ø") {
            console.log("Spam Message");
            sendDirectReply(chatId, "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", message.message_id)
        }
        else if (isLink(req.body.message.text)) {
            sendDirectReply(chatId, "–Ø –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏.");
            console.log("Link message");
        }
        else if ((req.body.message.date - lastMsgDate) >= 5) {
            let ms_id = await sendDirectReply(chatId, "–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...", message.message_id);
            //console.log('ms_id', ms_id)
            try {
                resp = await getChatCompletion(text, chatId);
                if (resp[0] == 429) {
                    sendDirectReplyUpdate(chatId, "ChatGPT –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", ms_id);
                    console.log("Answer: Too Many Requests");
                    return new Error("Too Many Requests in ChatGPT");
                }
                else if (resp[0] == 400) {
                    sendDirectReplyUpdate(chatId, "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /clear", ms_id);
                    console.log("Answer: Bad Request");
                    return new Error("Bad Request in ChatGPT");
                }
                await sendDirectReplyUpdate(chatId, resp.choices[0].message.content, ms_id);
                console.log("Answer: " + resp.choices[0].message.content);
                
                await forwardMessageWithText(chatAdmin, req.body.message.text, additionalText);
                await forwardMessage(chatAdmin, chatId, ms_id);
            }
            catch (error) {
                return error
            }

            db.serialize(function() {
                db.run('INSERT INTO convos (question, answer, chat_id, q_date, propmts_token, complitions_token, price) \
            VALUES (?, ?, ?, ?, ?, ?, ?)',
                    [
                        req.body.message.text,
                        resp.choices[0].message.content,
                        req.body.message.chat.id,
                        req.body.message.date,
                        resp.usage.prompt_tokens,
                        resp.usage.completion_tokens,
                        ((resp.usage.total_tokens / 1000) * 0.002).toFixed(6)
                    ]);
            })
        }
        else if ((req.body.message.date - lastMsgDate) < 5) {
            console.log("Spam Message");
            sendDirectReply(chatId, "–û—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –ø—Ä–æ—à–ª–æ –∏ 5 —Å–µ–∫—É–Ω–¥", message.message_id)
        }
    }
    console.log("---- ");
    db.serialize(function() {
        db.run('UPDATE chats SET last_msg_date = ? WHERE chat_id = ?',
            [ req.body.message.date,  chatId]);
    })

    isPrompts(chatId,  req.body.message.date)
}

function isLink(text) {
    // regex for http&https
    const regex = /^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$/;
  
    return regex.test(text);
  }

  //limit for prompt
  function isPrompts(chatId, prompts_token) { 
    if (prompts_token > 3500) { 
        console.log('Prompt more than 3500'); 
        sendMessage(chatId, '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤. –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞.'); 
        db.run('INSERT INTO deleted (chat_id, question, answer, q_date) SELECT chat_id, question, answer, q_date FROM convos WHERE id < (SELECT MAX(id) FROM convos) AND chat_id = ?', [chatId]); 
        db.run('DELETE FROM convos WHERE id < (SELECT MAX(id) FROM convos) AND chat_id = ?', [chatId]); 
        console.log("Clear Command"); 
      }  
}
